; PlatformIO Project Configuration File
; Please visit documentation: https://docs.platformio.org/page/projectconf.html



[platformio]
default_envs = esp32dev

src_dir  = ./src
data_dir = ./src/data
build_cache_dir = ~/.buildcache
extra_configs =
  platformio_override.ini


[common]
#platform_packages = platformio/toolchain-xtensa @ ~2.100300.220621 #2.40802.200502
#                    platformio/tool-esptool #@ ~1.413.0
#                    platformio/tool-esptoolpy #@ ~1.30000.0

#platform_packages = platformio/toolchain-xtensa 
#                    platformio/tool-esptool 
#                    platformio/tool-esptoolpy 


# FLAGS: DEBUG
# esp8266 : see https://docs.platformio.org/en/latest/platforms/espressif8266.html#debug-level
# esp32   : see https://docs.platformio.org/en/latest/platforms/espressif32.html#debug-level
# ------------------------------------------------------------------------------
debug_flags = 
-D DEBUG=1 
  -D ENABLE_DEBUG
  -D DEBUG_ESP_WIFI 
  -D DEBUG_ESP_HTTP_CLIENT 
  -D DEBUG_ESP_HTTP_UPDATE 
  -D DEBUG_ESP_HTTP_SERVER 
  -D DEBUG_ESP_UPDATER 
  -D DEBUG_ESP_OTA 
  #-D DEBUG_TLS_MEM ;; for esp8266
  # if needed (for memleaks etc) also add; -DDEBUG_ESP_OOM -include "umm_malloc/umm_malloc_cfg.h"
  # -DDEBUG_ESP_CORE is not working right now

build_flags = 
  -std=gnu++17
  -D MQTT_MAX_PACKET_SIZE=1024
  -D SECURE_CLIENT=SECURE_CLIENT_BEARSSL
  -D BEARSSL_SSL_BASIC
  -D CORE_DEBUG_LEVEL=0
  -D NDEBUG
  -D USE_MY_CONFIG
;  -D DISABLE_AP_MODE
;  -D DISABLE_MQTT
;  -D DISABLE_WEBSOCKETS

;build_type = release
build_type = debug

# ------------------------------------------------------------------------------
# FLAGS: ldscript (available ldscripts at https://github.com/esp8266/Arduino/tree/master/tools/sdk/ld)
#    ldscript_2m1m (2048 KB) = 1019 KB sketch, 4 KB eeprom, 1004 KB spiffs, 16 KB reserved
#    ldscript_4m1m (4096 KB) = 1019 KB sketch, 4 KB eeprom, 1002 KB spiffs, 16 KB reserved, 2048 KB empty/ota?
#
# Available lwIP variants (macros):
#    -DPIO_FRAMEWORK_ARDUINO_LWIP_HIGHER_BANDWIDTH  = v1.4 Higher Bandwidth (default)
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY       = v2 Lower Memory
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH = v2 Higher Bandwidth
#    -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
#
# BearSSL performance:
#  When building with -DSECURE_CLIENT=SECURE_CLIENT_BEARSSL, please add `board_build.f_cpu = 160000000` to the environment configuration
#
# BearSSL ciphers:
#   When building on core >= 2.5, you can add the build flag -DBEARSSL_SSL_BASIC in order to build BearSSL with a limited set of ciphers:
#     TLS_RSA_WITH_AES_128_CBC_SHA256 / AES128-SHA256
#     TLS_RSA_WITH_AES_256_CBC_SHA256 / AES256-SHA256
#     TLS_RSA_WITH_AES_128_CBC_SHA / AES128-SHA
#     TLS_RSA_WITH_AES_256_CBC_SHA / AES256-SHA
#  This reduces the OTA size with ~45KB, so it's especially useful on low memory boards (512k/1m).
# ------------------------------------------------------------------------------

build_unflags = -std=gnu++11

extra_scripts =
  #pre:pio-scripts/set_version.py
  #post:pio-scripts/output_bins.py
  #post:pio-scripts/strip-floats.py


[env]
framework = arduino
board_build.flash_mode = dout
monitor_speed = 115200

# slow upload speed (comment this out with a ';' when building for development use)
;upload_speed = 115200
# fast upload speed (remove ';' when building for development use)
upload_speed = 921600

extra_scripts = ${common.extra_scripts}

# ------------------------------------------------------------------------------
# LIBRARIES: required dependencies
#   Please note that we don't always use the latest version of a library.
# ------------------------------------------------------------------------------
lib_compat_mode = strict
lib_deps = bblanchon/ArduinoJson@^7.2.0
    knolleary/PubSubClient@^2.8


#lib_deps =
    #https://github.com/lorol/LITTLEFS.git
    #knolleary/PubSubClient@^2.8
    #adafruit/Adafruit BME280 Library@^2.2.2
    #adafruit/Adafruit BusIO@^1.13.2
    #adafruit/Adafruit ILI9341@^1.5.12
    #adafruit/Adafruit ST7735 and ST7789 Library@^1.9.3
    #jandrassy/TelnetStream@^1.2.2
    #For BME280 sensor uncomment following
    #BME280 @ ~3.0.0
    ; adafruit/Adafruit BMP280 Library @ 2.1.0
    ; adafruit/Adafruit CCS811 Library @ 1.0.4
    ; adafruit/Adafruit Si7021 Library @ 1.4.0



[esp32]
board = esp32dev
#platform = espressif32@3.5.0
platform = espressif32@6.9.0
#platform_packages = framework-arduinoespressif32 @ https://github.com/Aircoookie/arduino-esp32.git#1.0.6.4
build_flags = -g
  -D ARDUINO_ARCH_ESP32
; -DARDUINO_USB_CDC_ON_BOOT=0 ;; this flag is mandatory for "classic ESP32" when building with arduino-esp32 >=2.0.3
default_partitions = tools/ESP32_4MB_1MB_EEPROM.csv
#platform_packages = ${common.platform_packages}



[env:esp32dev]
board = ${esp32.board}
platform=  ${esp32.platform}
#platform_packages = ${esp32.platform_packages}
build_unflags = ${common.build_unflags}
build_flags = ${common.build_flags} ${esp32.build_flags} -D FAN_RELEASE_NAME=ESP32_qio80 
monitor_filters = esp32_exception_decoder
;board_build.partitions = ${esp32.default_partitions}
;board_build.f_flash = 80000000L
;board_build.flash_mode = qio

